@model Library.ViewModel.Inventory.Sales.SaleReturnViewModel
@using ERP.WebUI.Html
@{
    ViewBag.Title = "Create";
}
<div class="row">
    <div class="col-xl-12">
        <a href="/SuperShopSaleReturn" class="btn btn-bg pull-right top-button-back" role="button">Back</a>
        <h4 class="page-header">Add Sales Return</h4>
    </div>
</div>
@using (Ajax.BeginForm("Create", "SuperShopSaleReturn", null, new AjaxOptions { HttpMethod = "POST" }, new { id = "DialogForm" }))
{
    @Html.HiddenFor(model => model.Type)
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label class="control-label  ">Invoice No.</label>
                @Html.TextBoxFor(model => model.SaleId, new { @class = "form-control", @readonly = "readonly" })
                @Html.HiddenFor(model => model.SaleId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label class="control-label  ">Customer</label>
                @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control", @readonly = "readonly" })
                @Html.HiddenFor(model => model.CustomerId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.SalesReturnDate, new { title = "Return date", @class = "control-label  mendatory" })
                @Html.DatePickerFor(model => model.SalesReturnDate, new { @class = "form-control" })
                @Html.HiddenFor(m => m.SaleDate)
                @Html.ValidationMessageFor(model => model.SalesReturnDate, null, new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl-12">
            <table id="tbl" class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th class="td-button-sale">
                            @Html.CheckBoxFor(model => model.SelectAll, new { @class = "selectAll" })
                        </th>
                        <th class="form-group item-width " title="Item Code">Code</th>
                        <th class="form-group item-width ">Name</th>
                        <th class="form-group ">UOM</th>
                        <th class="form-group ">Sold Quantity</th>
                        <th class="form-group ">Sold Amount</th>
                        <th class="form-group ">Remaining Quantity</th>
                        <th class="form-group ">Return Quantity </th>
                        <th class="form-group ">Return Amount</th>
                    </tr>
                </thead>
                <tbody id="editorItemRows">
                    @if (Model.SaleReturnDetails != null)
                    {
                        foreach (var item in Model.SaleReturnDetails)
                        {
                            Html.RenderPartial("_SaleReturnItemRow", item);
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row ">
        <div class="col-xl-12">
            <div class="form-group">
                <input type="text" id="TotalAmount" name="btn" value="0" class="col-1 form-control pull-right ml-2" readonly>
                <input type="text" id="TotalQuantity" name="btn" value="0" class="col-1 form-control pull-right ml-5" readonly>
                <input type="button" id="btnAdd1" name="btn" value="Return" class="btn btn-danger col-1 pull-right ml-2">

            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            var totalAmount = 0;
            var totalQty = 0;

            for (var i = 0; i < $(".returnQuantity").length; i++) {
                totalQty += parseFloat($($(".returnQuantity")[i]).val()) || 0;
                totalAmount += parseFloat($($(".returnAmount")[i]).val()) || 0;
            }
            $("#TotalQuantity").val(totalQty.toFixed(2));
            $("#TotalAmount").val(totalAmount.toFixed(2));
            //CalculateSuperShopSaleReturnAmount();
        });

        $("input:checkbox.selectAll").on("click", function () {
            var el = $(this);
            var checked = el.is(":checked");
            if (checked) {
                $(this).closest("table").find(".selectone:checkbox").prop("checked", true);
            }
            else {
                $(this).closest("table").find(".selectone:checkbox").prop("checked", false);
            }
        });

        $(".selectone").on("click", function () {
            var el = $(this);
            var totalcheckbox = el.parents("tbody").find(".selectone:checkbox").length;
            var totalcheckedcheckbox = el.parents("tbody").find(".selectone:checked").length;
            $("input:checkbox.selectAll").prop("checked", (totalcheckbox == totalcheckedcheckbox));
            return true;
        });

        $("#btnAdd1").on("click", function (e) {
            debugger;
            e.preventDefault();
            var type = $(this).val();
            $("#Type").val(type);
            var totalcheckedcheckbox = $("input:checkbox.selectone").parents("tbody").find(".selectone:checked").length;
            if (totalcheckedcheckbox < 1) {
                ShowResult("Please select item.", "failure");
                return false;
            }
            CustomAsk("Are you sure, you want to return?", "function", "SubmitForm()");
        });

        $("#btnAdd2").on("click", function (e) {
            e.preventDefault();
            var type = $(this).val();
            $("#Type").val(type);
            var totalcheckedcheckbox = $("input:checkbox.selectone").parents("tbody").find(".selectone:checked").length;
            if (totalcheckedcheckbox < 1) {
                ShowResult("Please select item.", "failure");
                return false;
            }
            CustomAsk("Are you sure, you want to cancel?", "function", "SubmitForm()");
        });

        function SubmitForm() {
            $("#DialogForm").submit();
        }

        $('.returnQuantity').on('blur', function () {
            var el = $(this);
            var rqty = parseFloat(el.closest("tr").find(".returnQuantity").val()) || 0;
            qty = parseFloat(rqty.toFixed(2));
            if (qty <= 0) {
                ShowResult("Pleasse input minimum 0.01 qty or uncheck this checkbox", "failure");
                el.closest("tr").find(".returnQuantity").val(1);
            } else {

                var unitPrice = parseFloat(el.closest("tr").find(".unitPrice").val()) || 0;
                var totalprics = (qty * unitPrice);
                el.closest("tr").find(".returnAmount").val(parseFloat(totalprics).toFixed(2));
                el.closest("tr").find(".returnQuantity").val(parseFloat(qty).toFixed(2));

                var totalAmount = 0;
                var totalQty = 0;

                for (var i = 0; i < $(".returnQuantity").length; i++) {
                    totalQty += parseFloat($($(".returnQuantity")[i]).val()) || 0;
                    totalAmount += parseFloat($($(".returnAmount")[i]).val()) || 0;
                }
                $("#TotalQuantity").val(totalQty.toFixed(2));
                $("#TotalAmount").val(totalAmount.toFixed(2));
            }

        })
    </script>
}
