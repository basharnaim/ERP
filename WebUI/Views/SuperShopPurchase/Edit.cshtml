@model Library.ViewModel.Inventory.Purchases.SuperShopPurchaseViewModel
@using ERP.WebUI.Html
@{
    ViewBag.Title = "PurchaseDirect";
    ViewBag.YouAreHere = "PurchaseDirect > New";
}
<div class="row">
    <div class="col-xl-12">
        <a href="/SuperShopPurchase" class="btn btn-bg pull-right top-button-back" role="button">Back</a>
        <h4 class="page-header">Add Purchase Direct</h4>
    </div>
</div>
@using (Ajax.BeginForm("Edit", "SuperShopPurchase", null, new AjaxOptions { HttpMethod = "POST" }, new { id = "DialogForm" }))
{
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.Id, new { title = "Purchase No", @class = "control-label  mendatory" })
                @Html.TextBoxFor(model => model.Id, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Id, null, new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.MemoNo, new { title = "Memo No", @class = "control-label " })
                @Html.TextBoxFor(model => model.MemoNo, new { autofocus = "", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MemoNo, null, new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label mendatory">Supplier</label>
                @Html.SimpleDropDownFor(model => model.SupplierId, "/Supplier/GetSupplierList", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SupplierId, null, new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.PurchaseDate, new { @class = "control-label  mendatory" })
                @Html.DatePickerFor(model => model.PurchaseDate, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PurchaseDate, null, new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <table id="tbl" class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th class="input-size-width">Product</th>
                        <th>UOM</th>
                        <th>Stock</th>
                        <th>Quantity </th>
                        <th>Purchase Price</th>
                        <th>Net Amount</th>
                        <th class="td-width-button"></th>
                    </tr>
                </thead>
                <tbody id="editorItemRows">
                    @if (Model != null && Model.PurchaseDetails != null && Model.PurchaseDetails.Any())
                    {
                        foreach (var item in Model.PurchaseDetails)
                        {
                            Html.RenderPartial("_PurchaseItemRow", item);
                        }
                    }
                </tbody>
            </table>
            <p>
                <a href="javascript:void(0);" class="AddRow" data-url="/SuperShopPurchase/BlankItem" data-container="editorItemRows"><span class="btn-sm btn-bg fa fa-plus-square">Add New</span></a>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.HiddenFor(model => model.TotalQuantity, new { @class = "totalQty right form-control", @readonly = "readonly", Value = String.Format("{0:0.00}", Model.TotalQuantity) })
            </div>
        </div>
        <div class="col-md-4">
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.TotalAmount, new { @class = "control-label " })
                <div class="col-xs-8">
                    @Html.TextBoxFor(model => model.TotalAmount, new { @class = "totalAmount right form-control text-right", @readonly = "readonly", Value = String.Format("{0:0.00}", Model.TotalAmount) })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MemoWiseDiscount, new { @class = "control-label " })
                <div class="col-xs-8">
                    @Html.TextBoxFor(model => model.MemoWiseDiscount, new { @class = "right form-control text-right", onclick = "this.select()", tabindex = "4", Value = String.Format("{0:0.00}", Model.MemoWiseDiscount) })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NetAmount, new { @class = "control-label " })
                <div class="col-xs-8">
                    @Html.TextBoxFor(model => model.NetAmount, new { @class = "right form-control text-right", @readonly = "readonly", Value = String.Format("{0:0.00}", Model.NetAmount) })
                </div>
            </div>
        </div>
    </div>
    <div class="row ">
        <div class="col-md-12 bottom-height">
            <div class="form-group pull-right">
                <div class="col-xs-12">
                    <button type="submit" class="btn btn-bg">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        var productList = eval('@Html.Raw(ViewBag.ItemList)');

        function ProductCodeAutoComplete() {
            $(".productName:not(.productNameInited)").autocomplete({
                source: productList,
                minLength: 1,
                delay: 500,
                autoFocus: false,
                focus: function (event, ui) {
                    event.preventDefault();
                    $(this).val(ui.item.label);
                },
                select: function (event, ui) {
                    event.preventDefault();
                    CheckAddedItem($(this), ui.item.value);
                    $(this).closest("tr").find(".productId").val(ui.item.value);
                }
            }).addClass("productNameInited");
        }

        function CheckAddedItem(el, productId) {
            if (CheckDuplicate(productId)) {
                $(el).closest("tr").find(".productId").val("");
                $(el).closest("tr").find(".productCode").val("");
                $(el).closest("tr").find(".productName").val("");
                ShowResult("Item is duplicate!.", "failure");
                return false;
            } else {
                var product = productList.find(function (product) { return product.value === productId; });
                el.closest("tr").find(".productName").val(product.ProductName);
                el.closest("tr").find(".uOMName").val(product.UOMName);
                el.closest("tr").find(".uOMId").val(product.UOMId);
                el.closest("tr").find(".productStock").val(product.ProductStock);
                el.closest("tr").find(".purchasePrice").val(product.PurchasePrice);
                return true;
            }
        }

        $("#MemoWiseDiscount").on("keyup change", function () {
            var discount = parseFloat($(this).val()) || 0;
            var totalAmount = parseFloat($("#TotalAmount").val()) || 0;
            var netAmount = parseFloat(totalAmount - discount) || 0;
            $("#NetAmount").val(netAmount.toFixed(2));
        });

    $(document).keyup(function (e) {
        if (e.keyCode == 45) {
            e.preventDefault();
            $.ajax({
                url: '/SuperShopPurchase/BlankItem',
                type: 'POST',
                cache: false,
                success: function (html) {
                    $("#editorItemRows").append(html);
                    $(".productName").closest("tr").find("input.productName").focus();
                }
            });
        }

        else if (e.keyCode == 46) {
            e.preventDefault();
            var len = $('#tbl tr').length;
            if (len > 2) {
                $('#tbl tr').eq(len - 1).remove();
                $('#tbl tr').eq(len - 2).find("input.productName").focus();
                CalculatePurchaseSummary();
            }
            else {
                ShowResult("At least one row needed!", "failure");
            }

        }
    });

    </script>
}






